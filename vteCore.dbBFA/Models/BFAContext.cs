// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace vteCore.dbBFA.Models;

public partial class BFAContext : DbContext
{
    public BFAContext()
    {
    }

    public BFAContext(DbContextOptions<BFAContext> options)
        : base(options)
    {
    }

    public virtual DbSet<DFADoc> DFADocs { get; set; }

    public virtual DbSet<DFAMessage> DFAMessages { get; set; }

    public virtual DbSet<DFASetting> DFASettings { get; set; }

    public virtual DbSet<DFAUser> DFAUsers { get; set; }

    public virtual DbSet<DFAUserConfig> DFAUserConfigs { get; set; }

    public virtual DbSet<WalkwayBFAExit> WalkwayBFAExits { get; set; }

    public virtual DbSet<WalkwayBFARecord> WalkwayBFARecords { get; set; }

    public virtual DbSet<WalkwayBFAVerify> WalkwayBFAVerifies { get; set; }

    public virtual DbSet<WalkwayPicRecord> WalkwayPicRecords { get; set; }

    public virtual DbSet<dfa_view> dfa_views { get; set; }

    public virtual DbSet<dfarecord_view> dfarecord_views { get; set; }

    public virtual DbSet<dfarecordsnap_view> dfarecordsnap_views { get; set; }

    public virtual DbSet<setting_view> setting_views { get; set; }



    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<DFADoc>(entity =>
        {
            entity.Property(e => e.updatedAt).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<DFASetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WPESetting");
        });

        modelBuilder.Entity<DFAUser>(entity =>
        {
            entity.Property(e => e.updatedAt).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<DFAUserConfig>(entity =>
        {
            entity.HasOne(d => d.UserKeyNavigation).WithMany(p => p.DFAUserConfigs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DFAUserConfig_DFAUser");
        });

        modelBuilder.Entity<WalkwayBFAExit>(entity =>
        {
            entity.HasOne(d => d.BfaRecord).WithMany(p => p.WalkwayBFAExits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WalkwayBFAExit_WalkwayBFARecord");
        });

        modelBuilder.Entity<WalkwayBFAVerify>(entity =>
        {
            entity.HasOne(d => d.BfaRecord).WithMany(p => p.WalkwayBFAVerifies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WalkwayBFAVerify_WalkwayBFARecord");
        });

        modelBuilder.Entity<WalkwayPicRecord>(entity =>
        {
            entity.HasOne(d => d.BfaExit).WithMany(p => p.WalkwayPicRecords).HasConstraintName("FK_WalkwayPicRecord_WalkwayBFAExit");

            entity.HasOne(d => d.BfaRecord).WithMany(p => p.WalkwayPicRecords)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WalkwayPicRecord_WalkwayBFARecord");
        });

        modelBuilder.Entity<dfa_view>(entity =>
        {
            entity.ToView("dfa_view");
        });

        modelBuilder.Entity<dfarecord_view>(entity =>
        {
            entity.ToView("dfarecord_view");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<dfarecordsnap_view>(entity =>
        {
            entity.ToView("dfarecordsnap_view");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<setting_view>(entity =>
        {
            entity.ToView("setting_view");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}